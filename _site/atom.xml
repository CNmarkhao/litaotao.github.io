<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Taotao's Zone</title>
  <meta name="renderer" content="webkit">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="mobile-web-app-capable" content="yes">
  <link rel="stylesheet" href="/css/font-awesome/css/font-awesome.min.css" type="text/css" />
  <!-- <link rel="stylesheet" href="/css/pygments.css" type="text/css" /> -->
  <link rel="stylesheet" href="/css/default.css" type="text/css" />
  <link rel="stylesheet" href="/css/desktop.css" type="text/css" />
  <link rel="stylesheet" href="/css/mobile.css" type="text/css" />
  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
  <link rel="alternate" type="application/atom+xml" title="Recent Entries" href="/atom.xml" />
  <script src="/js/jquery-1.11.0.min.js" type="text/javascript"></script>
  <script src="/js/jquery-migrate-1.2.1.js" type="text/javascript"></script>
  <script src="/js/jquery.transit.min.js" type="text/javascript"></script>
  <script src="/js/common.js" type="text/javascript"></script>
</head>
<body>
  <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

   <title>Taotao's Zone</title>
   <link href="http://litaotao.github.io/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://litaotao.github.io" rel="alternate" type="text/html" />
   <updated>2016-03-06T15:02:50+08:00</updated>
   <id>http://litaotao.github.io</id>
   <author>
     <name></name>
     <email></email>
   </author>

   
   <entry>
     <title>『 Spark 』2. spark 基本概念解析</title>
     <link href="/spark-questions-concepts"/>
     <updated>2016-02-05T00:00:00+08:00</updated>
     <id>/spark-questions-concepts</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;本系列是综合了自己在学习spark过程中的理解记录 ＋ 对参考文章中的一些理解 ＋ 个人实践spark过程中的一些心得而来。写这样一个系列仅仅是为了梳理个人学习spark的笔记记录，并非为了做什么教程，所以一切以个人理解梳理为主，没有必要的细节就不会记录了。若想深入了解，最好阅读参考文章和官方文档。&lt;/p&gt;

&lt;p&gt;其次，本系列是基于目前最新的 spark 1.6.0 系列开始的，spark 目前的更新速度很快，记录一下版本好还是必要的。&lt;/p&gt;

&lt;h2 id=&quot;application&quot;&gt;1. Application&lt;/h2&gt;

&lt;p&gt;用户在 spark 上构建的程序，包含了 driver 程序以及集群上的 executors.&lt;/p&gt;

&lt;h2 id=&quot;driver-program&quot;&gt;2. Driver Program&lt;/h2&gt;

&lt;p&gt;运行 main 函数并且创建 SparkContext 的程序。&lt;/p&gt;

&lt;h2 id=&quot;cluster-manager&quot;&gt;3. Cluster Manager&lt;/h2&gt;

&lt;p&gt;集群的资源管理器，在集群上获取资源的外部服务。
拿 Yarn 举例，客户端程序会向 Yarn 申请计算我这个任务需要多少的 memory，多少 CPU，etc。
然后 Cluster Manager 会通过调度告诉客户端可以使用，然后客户端就可以把程序送到每个 Worker Node 上面去执行了。&lt;/p&gt;

&lt;h2 id=&quot;worker-node&quot;&gt;4. Worker Node&lt;/h2&gt;

&lt;p&gt;集群中任何一个可以运行spark应用代码的节点。
Worker Node就是物理节点，可以在上面启动Executor进程。&lt;/p&gt;

&lt;h2 id=&quot;executor&quot;&gt;5. Executor&lt;/h2&gt;

&lt;p&gt;在每个 Worker Node 上为某应用启动的一个进程，该进程负责运行任务，并且负责将数据存在内存或者磁盘上，每个任务都有各自独立的 Executor。
Executor 是一个执行 Task 的容器。它的主要职责是：&lt;/p&gt;

&lt;p&gt;1、初始化程序要执行的上下文 SparkEnv，解决应用程序需要运行时的 jar 包的依赖，加载类。
2、同时还有一个 ExecutorBackend 向 cluster manager 汇报当前的任务状态，这一方面有点类似 hadoop的 tasktracker 和 task。&lt;/p&gt;

&lt;p&gt;总结：Executor 是一个应用程序运行的监控和执行容器。&lt;/p&gt;

&lt;h2 id=&quot;jobs&quot;&gt;6. Jobs&lt;/h2&gt;

&lt;p&gt;包含很多 task 的并行计算，可以认为是 Spark RDD 里面的 action,每个 action 的计算会生成一个job。
用户提交的 Job 会提交给 DAGScheduler，Job 会被分解成 Stage和Task。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/spark-web-ui-job.jpg&quot; alt=&quot;spark-web-ui-job.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A job is triggered by an &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;count()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;saveAsTextFile()&lt;/code&gt;, click on a job to see info about the &lt;code class=&quot;highlighter-rouge&quot;&gt;stages&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;tasks&lt;/code&gt; inside it.&lt;/p&gt;

&lt;h2 id=&quot;stage&quot;&gt;7. Stage&lt;/h2&gt;

&lt;p&gt;一个 Job 会被拆分为多组 Task，每组任务被称为一个 Stage就像Map Stage， Reduce Stage。&lt;/p&gt;

&lt;p&gt;Stage 的划分在 RDD 的论文中有详细的介绍，简单的说是以 shuffle和result 这两种类型来划分。
在 Spark 中有两类 task:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;shuffleMapTask&lt;/p&gt;

    &lt;p&gt;输出是shuffle所需数据, stage的划分也以此为依据，shuffle之前的所有变换是一个stage，shuffle之后的操作是另一个stage。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;resultTask，&lt;/p&gt;

    &lt;p&gt;输出是result，比如 rdd.parallize(1 to 10).foreach(println) 这个操作没有shuffle，直接就输出了，那么只有它的task是resultTask，stage也只有一个；如果是rdd.map(x =&amp;gt; (x, 1)).reduceByKey(_ + _).foreach(println), 这个job因为有reduce，所以有一个shuffle过程，那么reduceByKey之前的是一个stage，执行shuffleMapTask，输出shuffle所需的数据，reduceByKey到最后是一个stage，直接就输出结果了。如果job中有多次shuffle，那么每个shuffle之前都是一个stage。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;task&quot;&gt;8. Task&lt;/h2&gt;

&lt;p&gt;被送到executor上的工作单元，Spark上分为2类task。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;shuffleMapTask&lt;/p&gt;

    &lt;p&gt;A ShuffleMapTask divides the elements of an RDD into multiple buckets (based on a partitioner specified in the ShuffleDependency).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;resultTask&lt;/p&gt;

    &lt;p&gt;A task that sends back the output to the driver application.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;partition&quot;&gt;9. Partition&lt;/h2&gt;

&lt;p&gt;Partition类似hadoop的Split，计算是以partition为单位进行的，当然partition的划分依据有很多，这是可以自己定义的，像HDFS文件，划分的方式就和MapReduce一样，以文件的block来划分不同的partition。总而言之，Spark的partition在概念上与hadoop中的split是相似的，提供了一种划分数据的方式。&lt;/p&gt;

&lt;h2 id=&quot;rdd&quot;&gt;10. RDD&lt;/h2&gt;

&lt;p&gt;先看看原文 &lt;a href=&quot;../files/spark-rdd-paper.pdf&quot;&gt;Resilient Distributed Datasets: A Fault-Tolerant Abstraction for
In-Memory Cluster Computing&lt;/a&gt; 是怎么介绍 RDD 的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;a distributed memory abstraction that lets programmers perform in-memory computations on large clusters in a fault-tolerant manner.&lt;/p&gt;

&lt;p&gt;RDDs are motivated by two types of applications that current computing frameworks handle inefficiently:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iterative algorithms;&lt;/li&gt;
  &lt;li&gt;interactive data mining tools;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both cases, keeping data in memory can improve performance by an order of magnitude.&lt;/p&gt;

&lt;p&gt;To achieve fault tolerance efficiently, RDDs provide a restricted form of shared memory, based on coarsegrained
transformations rather than fine-grained updates to shared state. However, we show that RDDs are expressive enough to capture a wide class of computations, including recent specialized programming models for iterative jobs, such as Pregel, and new applications that these models do not capture. We have implemented RDDs in a system called Spark, which we evaluate through a variety of user applications and benchmarks.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;每个RDD有5个主要的属性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一组分片（partition），即数据集的基本组成单位&lt;/li&gt;
  &lt;li&gt;一个计算每个分片的函数&lt;/li&gt;
  &lt;li&gt;对parent RDD的依赖，这个依赖描述了RDD之间的lineage&lt;/li&gt;
  &lt;li&gt;对于key-value的RDD，一个Partitioner，这是可选择的&lt;/li&gt;
  &lt;li&gt;一个列表，存储存取每个partition的preferred位置。对于一个HDFS文件来说，存储每个partition所在的块的位置。这也是可选择的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　把上面这5个主要的属性总结一下，可以得出RDD的大致概念。首先要知道，RDD大概是这样一种表示数据集的东西，它具有以上列出的一些属性。是spark项目组设计用来表示数据集的一种数据结构。而spark项目组为了让RDD能handle更多的问题，又规定RDD应该是只读的，分区记录的一种数据集合中。可以通过两种方式来创建RDD：一种是基于物理存储中的数据，比如说磁盘上的文件；另一种，也是大多数创建RDD的方式，即通过其他RDD来创建【以后叫做转换】而成。而正因为RDD满足了这么多特性，所以spark把RDD叫做Resilient Distributed Datasets，中文叫做弹性分布式数据集。很多文章都是先讲RDD的定义，概念，再来说RDD的特性。我觉得其实也可以倒过来，通过RDD的特性反过来理解RDD的定义和概念，通过这种由果溯因的方式来理解RDD也未尝不可。反正对我个人而言这种方式是挺好的。&lt;/p&gt;

&lt;p&gt;RDD是Spark的核心，也是整个Spark的架构基础，可以总下出几个它的特性来：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;它是不变的数据结构存储&lt;/li&gt;
  &lt;li&gt;它是支持跨集群的分布式数据结构&lt;/li&gt;
  &lt;li&gt;可以根据数据记录的key对结构进行分区&lt;/li&gt;
  &lt;li&gt;提供了粗粒度的操作，且这些操作都支持分区&lt;/li&gt;
  &lt;li&gt;它将数据存储在内存中，从而提供了低延迟性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scparallelize&quot;&gt;11. sc.parallelize&lt;/h2&gt;

&lt;p&gt;先看看 api 文档里是怎么说的：&lt;a href=&quot;http://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.SparkContext.parallelize&quot;&gt;parallelize&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;parallelize(c, numSlices=None)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Distribute a local Python collection to form an RDD. Using xrange is recommended if the input represents a range for performance.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;code-distribute&quot;&gt;12. code distribute&lt;/h2&gt;

&lt;p&gt;提交 spark 应用时，spark 会把应用代码分发到所有的 worker 上面，应用依赖的包需要在所有的worker上都存在，有两种解决 worker 上相关包依赖的问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选用一些工具统一部署 spark cluster；&lt;/li&gt;
  &lt;li&gt;在提交 spark 应用的时候，指定应用依赖的相关包，把 应用代码，应用依赖包 一起分发到 worker；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cache-priority&quot;&gt;13. cache priority&lt;/h2&gt;

&lt;p&gt;cache 是否支持 priority，目前不支持，而且 spark 里面对 rdd 的 cache 和我们常见的缓存系统是不一样的。细节可以找我讨论。&lt;/p&gt;

&lt;h2 id=&quot;cores&quot;&gt;14. cores&lt;/h2&gt;

&lt;p&gt;The number of cores to use on each executor. For YARN and standalone mode only. In standalone mode, setting this parameter allows an application to run multiple executors on the same worker, provided that there are enough cores on that worker. Otherwise, only one executor per application will run on each worker.&lt;/p&gt;

&lt;p&gt;每一个 core，相当于一个 worker 上的进程，这些进程会同时执行分配到这个 worker 上的任务。简单的说，就是 spark manager 把一个 job 切分几个 task 分发到 worker 上同步执行，而每个 worker 把分配给自己的 task 再切分成几个 subtask，分配给当前 worker 上的不同进程。&lt;/p&gt;

&lt;h2 id=&quot;memory&quot;&gt;15. Memory&lt;/h2&gt;

&lt;p&gt;分配给 spark 应用的内存是仅仅给 cache 数据用吗？&lt;/p&gt;

&lt;p&gt;这个问题目前没有查看得非常仔细，后续继续更新。&lt;/p&gt;

&lt;h2 id=&quot;rdd-narrowwide-dependences&quot;&gt;16. RDD narrow/wide dependences&lt;/h2&gt;

&lt;p&gt;RDD 之间的依赖类别［ 或者，创建一个 RDD 的不同方法 ］&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/rdd-dependences.jpg&quot; alt=&quot;rdd-dependences.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;17. 本地内存与集群内存&lt;/h2&gt;

&lt;p&gt;所谓本地内存，是指在 driver 端的程序所需要的内存，由 driver 机器提供，一般用来生成测试数据，接受运算结果等；
所谓集群内存，是指提交到集群的作业能够向集群申请的最多内存使用量，一般用来存储关键数据；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/spark-memory-cluster-and-driver.jpg&quot; alt=&quot;spark-memory-cluster-and-driver.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;18. 限制用户使用的内存&lt;/h2&gt;

&lt;p&gt;可以在启动 spark 应用的时候申请；完全可控。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;19. 当用户申请总资源超过当前集群总资源&lt;/h2&gt;

&lt;p&gt;FIFO 资源分配方式。&lt;/p&gt;

&lt;h2 id=&quot;sparkcontext--sc&quot;&gt;20. SparkContext [经常简称为 sc]&lt;/h2&gt;

&lt;p&gt;spark app 的起点和入口，一般用来加载数据集，生成第一个 rdd。&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;4. Next&lt;/h2&gt;

&lt;p&gt;下一篇，通过几个简单的例子来介绍 spark 的基本编程模式。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;../files/spark-rdd-paper.pdf&quot;&gt;spark-rdd-paper : Resilient Distributed Datasets: A Fault-Tolerant Abstraction for
In-Memory Cluster Computing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://spark.apache.org/docs/latest/api/python/pyspark.html&quot;&gt;spark python API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;本系列文章链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;../introduction-to-spark&quot;&gt;『 Spark 』1. spark 简介 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;../spark-questions-concepts&quot;&gt;『 Spark 』2. spark 基本概念解析 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;../spark-programming-model&quot;&gt;『 Spark 』3. spark 编程模式 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>『 Spark 』1. spark 简介</title>
     <link href="/introduction-to-spark"/>
     <updated>2016-02-01T00:00:00+08:00</updated>
     <id>/introduction-to-spark</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;本系列是综合了自己在学习spark过程中的理解记录 ＋ 对参考文章中的一些理解 ＋ 个人实践spark过程中的一些心得而来。写这样一个系列仅仅是为了梳理个人学习spark的笔记记录，并非为了做什么教程，所以一切以个人理解梳理为主，没有必要的细节就不会记录了。若想深入了解，最好阅读参考文章和官方文档。&lt;/p&gt;

&lt;p&gt;其次，本系列是基于目前最新的 spark 1.6.0 系列开始的，spark 目前的更新速度很快，记录一下版本好还是必要的。&lt;/p&gt;

&lt;h2 id=&quot;spark&quot;&gt;1. 如何向别人介绍 spark&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Apache Spark™ is a fast and general engine for large-scale data processing.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache Spark is a fast and general-purpose cluster computing system.  &lt;br /&gt;
It provides high-level APIs in &lt;code class=&quot;highlighter-rouge&quot;&gt;Java, Scala, Python and R&lt;/code&gt;, and an optimized engine that supports general execution graphs.  &lt;br /&gt;
It also supports a rich set of higher-level tools including :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spark SQL for SQL and structured data processing, extends to DataFrames and DataSets&lt;/li&gt;
  &lt;li&gt;MLlib for machine learning&lt;/li&gt;
  &lt;li&gt;GraphX for graph processing&lt;/li&gt;
  &lt;li&gt;Spark Streaming for stream data processing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spark-&quot;&gt;2. spark 诞生的一些背景&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../images/introduction-to-spark-1.jpg&quot; alt=&quot;introduction-to-spark-1.jpg&quot; /&gt;
&lt;img src=&quot;../images/introduction-to-spark-2.jpg&quot; alt=&quot;introduction-to-spark-2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spark started in 2009, open sourced 2010, unlike the various specialized systems[hadoop, storm], Spark’s goal was to :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;generalize MapReduce to support new apps within same engine
    &lt;ul&gt;
      &lt;li&gt;it’s perfectly compatible with hadoop, can run on Hadoop, Mesos, standalone, or in the cloud. It can access diverse data sources including HDFS, Cassandra, HBase, and S3.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;speed up iteration computing over hadoop.
    &lt;ul&gt;
      &lt;li&gt;use memory + disk instead of disk as data storage medium&lt;/li&gt;
      &lt;li&gt;design a new programming modal, RDD, which make the data processing more graceful [RDD transformation, action, distributed jobs, stages and tasks]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../images/introduction-to-spark-4.jpg&quot; alt=&quot;introduction-to-spark-4.jpg&quot; /&gt;
&lt;img src=&quot;../images/introduction-to-spark-5.jpg&quot; alt=&quot;introduction-to-spark-5.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spark-1&quot;&gt;3. 为何选用 spark&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;designed, implemented and used as libs, instead of specialized systems;
    &lt;ul&gt;
      &lt;li&gt;much more useful and maintainable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../images/introduction-to-spark-3.jpg&quot; alt=&quot;introduction-to-spark-3.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;from history, it is designed and improved upon hadoop and storm, it has perfect genes;&lt;/li&gt;
  &lt;li&gt;documents, community, products and trends;&lt;/li&gt;
  &lt;li&gt;it provides sql, dataframes, datasets, machine learning lib, graph computing lib and activitily growth 3-party lib, easy to use, cover lots of use cases in lots field;&lt;/li&gt;
  &lt;li&gt;it provides ad-hoc exploring, which boost your data exploring and pre-processing and help you build your data ETL, processing job;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;next&quot;&gt;4. Next&lt;/h2&gt;

&lt;p&gt;下一篇，简单介绍 spark 里必须深刻理解的基本概念。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考文章&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stanford.edu/~rezab/sparkclass/slides/itas_workshop.pdf&quot;&gt;Intro to Apache Spark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;本系列文章链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;../introduction-to-spark&quot;&gt;『 Spark 』1. spark 简介 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;../spark-questions-concepts&quot;&gt;『 Spark 』2. spark 基本概念解析 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;../spark-programming-model&quot;&gt;『 Spark 』3. spark 编程模式 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>『 读书笔记 』effective Python</title>
     <link href="/effective-python"/>
     <updated>2015-12-30T00:00:00+08:00</updated>
     <id>/effective-python</id>
     <content type="html">&lt;h2 id=&quot;pythonic-thinking&quot;&gt;1. Pythonic Thinking&lt;/h2&gt;

&lt;h3 id=&quot;know-which-version-of-python-youre-using&quot;&gt;1.1 know which version of python you’re using&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;two major python version;&lt;/li&gt;
  &lt;li&gt;multiple popular &lt;code class=&quot;highlighter-rouge&quot;&gt;runtimes&lt;/code&gt; for python: cpython, jython, ironpython, pypy, etc;&lt;/li&gt;
  &lt;li&gt;be sure that the command line for running python on your system is the version you want;&lt;/li&gt;
  &lt;li&gt;prefer python 3 in your next project;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;follow-the-pep-8-style-guide&quot;&gt;1.2 follow the pep 8 style guide&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;always follow the pep 8 style guide;&lt;/li&gt;
  &lt;li&gt;sharing a common style with the larger community facilitates collaboration with others;&lt;/li&gt;
  &lt;li&gt;using a consistent style, making it easier to maintain your code later;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;know-the-differences-between-bytes-str-and-unicode&quot;&gt;1.3 know the differences between bytes, str and unicode&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wklken.me/posts/2013/08/31/python-extra-coding-intro.html&quot;&gt;PYTHON-进阶-编码处理小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/evening/archive/2012/04/19/2457440.html&quot;&gt;python encode和decode函数说明&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;in python 3, bytes contains sequences of 8-bit values, str contains sequences of unicode characters. bytes and str instances can’t be used together with operators.&lt;/li&gt;
  &lt;li&gt;in python 2, str contains sequences of 8-bit, unicode contains sequences of unicode characters. str and unicode can be used together with operators if the str only contains 7-bit ascii characters;&lt;/li&gt;
  &lt;li&gt;if you want to read or write binary data to/from a file, always open the file using a binary mode (like ‘rb’, ‘wb’);&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wirte-helper-functions-instead-of-complex-expressions&quot;&gt;1.4 wirte helper functions instead of complex expressions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;python’s syntax make it easy to write a single line expression that are overly difficult to read;&lt;/li&gt;
  &lt;li&gt;move complex single line expressions to helper functions;&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;if/else&lt;/code&gt; expression make it more readable to alternative using bool operators like &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;know-how-to-slice-sequence&quot;&gt;1.5 know how to slice sequence&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;avoid being verbose, do not use [0] and [len(sequence)] to fetch the first or end element of a sequence;&lt;/li&gt;
  &lt;li&gt;assign to a list slice will replace the origin data in that slice part even if the new data’s length does not equal with the old one;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;avoid-using-start-end-and-stride-in-a-single-slice&quot;&gt;1.6 avoid using start, end and stride in a single slice&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;specifying start, end and stride in a slice can be extremely confusing;&lt;/li&gt;
  &lt;li&gt;avoid negative stride if possible;&lt;/li&gt;
  &lt;li&gt;avoid using start, end and stride in a single slice, consider doing two assignments(one to slice, the other to stride) or using islice from the itertools module;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-list-comprehension-instead-of-map-and-filter&quot;&gt;1.7 use list comprehension instead of map and filter&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;list comprehension is more clearer than map and filter because it does not need another &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt; expression;&lt;/li&gt;
  &lt;li&gt;list comprehension allows to skip items from the input list, but map can not make that without using &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;dict and set also support comprehension;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;avoid-more-than-two-expressions-in-list-comprehension&quot;&gt;1.8 avoid more than two expressions in list comprehension&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;list comprehension support multiple levels of loops and multiple conditions per loop;&lt;/li&gt;
  &lt;li&gt;list comprehension with two expressions are difficult to read in some degree;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;consider-generator-for-large-list-comprehension&quot;&gt;1.9 consider generator for large list comprehension&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;list comprehension can consume large memory for large input;&lt;/li&gt;
  &lt;li&gt;generator can avoid memory issues by produce one item each time;&lt;/li&gt;
  &lt;li&gt;generator can execute very quickly when chained together;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prefer-enumerate-over-range&quot;&gt;1.10 prefer enumerate over range&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;index : {}, item : {}&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;enumerate provides a concise syntax for looping an iterator and getting the index for each item;&lt;/li&gt;
  &lt;li&gt;prefer enumerate instead looping over a range and indexing for each item;&lt;/li&gt;
  &lt;li&gt;you can specify a number to the enumerate function, specifying the index you want to iterate with;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-zip-to-process-iterators-in-parallel&quot;&gt;1.11 use zip to process iterators in parallel&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; can be used to iterate over multiple iterators;&lt;/li&gt;
  &lt;li&gt;in python 3, &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; is a lazy generator, in python 2, &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; return all the results as a list, but you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;izip&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;itertools&lt;/code&gt; to make it a generator;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; truncates it’s output silently if you supply it with different length, if you cannot lose any data, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;zip_longest&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;itertools&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;avoid-else-blocks-after-for-and-while-loops&quot;&gt;1.12 avoid else blocks after for and while loops&lt;/h3&gt;

&lt;h3 id=&quot;take-advantage-of-each-block-in-tryexceptelsefinally&quot;&gt;1.13 take advantage of each block in try/except/else/finally&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;try/finally&lt;/code&gt; statements let you run cleanup code regardless whether there is exceptions in your &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; block or not;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;functions&quot;&gt;2. functions&lt;/h2&gt;

&lt;h3 id=&quot;prefering-exceptions-to-return-none&quot;&gt;2.1 prefering exceptions to return none&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;functions that return &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; to indicate special meaning are error prone beacause &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; and other values (0, empty string, etc) are evaluated to &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; in the conditional expression;&lt;/li&gt;
  &lt;li&gt;Raise exceptions to indicate special situations instead of returning &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;, expect the calling code to handle the exceptions properly;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;know-how-closures-interactive-with-variable-scope&quot;&gt;2.2 know how closures interactive with variable scope&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort_priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort_priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;python supports closures: functions that refer to variables from the scope in which they were defined. this is why helper function is able to access the group argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;sort_priority&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;functions are first-class objects in python, meaning you can refer to them directly, assign them to variables, pass them as arguments to other functions, compare them in expressions and if statements, etc. this is how the sort method can accept a closure function as the key argument;&lt;/li&gt;
  &lt;li&gt;python has specific rules for comparing tuples. it first compares items in index zero, then index one and so on. this is why the return value from the helper closure causes the sort order to have two distinct groups.&lt;/li&gt;
  &lt;li&gt;when you refer a variable in an expression, the python interpreter will traverse the scope to resolve the reference in this order:
    &lt;ul&gt;
      &lt;li&gt;the current function’s scope;&lt;/li&gt;
      &lt;li&gt;any enclosing scope(like other containing functions)&lt;/li&gt;
      &lt;li&gt;the scope of the module that contains the code(also called the global scope)&lt;/li&gt;
      &lt;li&gt;the built-in scope&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;consider-generators-instead-of-returning-list&quot;&gt;2.3 consider generators instead of returning list&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;using generators can be clearer than the alternative of returning lists of accumulated results;&lt;/li&gt;
  &lt;li&gt;the iterator returned by a generator produces the set of values passed to yield expressions within the generator funtions’ body;&lt;/li&gt;
  &lt;li&gt;generators can produce a sequence of outputs for arbitrarily large inputs because their working memory doesn’t include all inputs and outputs;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;be-defensive-when-iterating-over-arguments&quot;&gt;2.4 be defensive when iterating over arguments&lt;/h3&gt;

&lt;h3 id=&quot;reduce-visual-noise-with-variable-positional-arguments&quot;&gt;2.5 reduce visual noise with variable positional arguments&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;functions can accept a variable number of positional arguments by using &lt;code class=&quot;highlighter-rouge&quot;&gt;*args&lt;/code&gt; in the def statement;&lt;/li&gt;
  &lt;li&gt;you can use the items from a sequence as the posistional arguments for a function with the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator;&lt;/li&gt;
  &lt;li&gt;using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; operator with a generator may cause your program to ran out of memory and crash;&lt;/li&gt;
  &lt;li&gt;adding new positional parameters to functions that accept &lt;code class=&quot;highlighter-rouge&quot;&gt;*args&lt;/code&gt; can introduce hard-to-find bugs;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;provide-optional-behavior-with-keyword-argument&quot;&gt;2.6 provide optional behavior with keyword argument&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;function arguments can be positional or keyword arguments;&lt;/li&gt;
  &lt;li&gt;keyword arguments will make it clear when it will be confusing only using positional arguments;&lt;/li&gt;
  &lt;li&gt;keyword arguments with default values make it easy to add new behaviors, especially there exists some callers;&lt;/li&gt;
  &lt;li&gt;optional keyword should always be passed using keyword argument other than positional argument;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-none-and-docstrings-to-specify-dynamic-default-arguments&quot;&gt;2.7 use none and docstrings to specify dynamic default arguments&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# when the function is defined, default argument values are evaluated just once per module at the loading time.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;msg: {}, time: {}&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;msg: {}, time: {}&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;use None for default value is especially important when the argument is mutable;&lt;/li&gt;
  &lt;li&gt;default argument values are only evaluated once;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;enforce-clarity-with-keyword-only-argument&quot;&gt;2.8 enforce clarity with keyword only argument&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;keyword argument make the intention of the function more clear;&lt;/li&gt;
  &lt;li&gt;prefer to use keyword arguments if possible, especially when there are many boolean flag arguments;&lt;/li&gt;
  &lt;li&gt;python 3 supports explicit syntax for keyword only arguments in functions;&lt;/li&gt;
  &lt;li&gt;python 2 can emulate keyword only argument by using &lt;code class=&quot;highlighter-rouge&quot;&gt;**kwargs&lt;/code&gt; and manually throw &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeError&lt;/code&gt; exception;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;classes-and-inheritance&quot;&gt;3. Classes and Inheritance&lt;/h2&gt;

&lt;h3 id=&quot;prefer-helper-classes-over-bookkeeping-with-dictionaries-and-tuples&quot;&gt;3.1 prefer helper classes over bookkeeping with dictionaries and tuples&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;avoid making dicts with values that are other dicts or long tuple;&lt;/li&gt;
  &lt;li&gt;use namedtuple for lightweight, immutable data containers before you need the flexibility of full class;&lt;/li&gt;
  &lt;li&gt;move your bookkeeping code to use multiple helper classes when your internal state dicts get complicated;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;accept-functions-for-simple-interfaces-instead-of-classes&quot;&gt;3.2 accept functions for simple interfaces instead of classes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;instead of defining classes, functions are often all you need for simple interfaces between components in python;&lt;/li&gt;
  &lt;li&gt;references to functions and methods in python are first class, meaning they can be used in expressions like any other type;&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;__call__&lt;/code&gt; special method enables instances of a class to be called like plain python functions;&lt;/li&gt;
  &lt;li&gt;when you need a function to maintain state, consider defining a class that provides the &lt;code class=&quot;highlighter-rouge&quot;&gt;__call__&lt;/code&gt; method instead of defining a stateful closure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-classmethod-polymorphism-to-construct-objects-generically&quot;&gt;3.3 use @classmethod polymorphism to construct objects generically&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;python only supports a single constructor per class, the &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt; method;&lt;/li&gt;
  &lt;li&gt;use @classmethod to define alternative constructors for your classes;&lt;/li&gt;
  &lt;li&gt;use class method polymorphism to provide generic ways to build and connect concrete subclasses;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;initialized-parent-classes-with-super&quot;&gt;3.4 initialized parent classes with super&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;python’s standard method to resolution order (MRO) solves the problems of superclass init order and diamond inheritance;&lt;/li&gt;
  &lt;li&gt;always use the super built-in function to init parent classes;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-multiple-inheritance-only-for-mix-in-utility-classes&quot;&gt;3.5 use multiple inheritance only for mix-in utility classes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;avoid using multiple inheritance if mix-in classes can achieve the same outcome;&lt;/li&gt;
  &lt;li&gt;use pluggable behaviors at the instance level to provide per-class customization when mix-in classes may require it;&lt;/li&gt;
  &lt;li&gt;compose mix-ins to create complex functionality from simple behaviors;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prefer-public-attributes-over-private-ones&quot;&gt;3.6 prefer public attributes over private ones&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;private attributes aren’t rigorously enforced by the python compiler;&lt;/li&gt;
  &lt;li&gt;plan from the beginning to allow subclasses to do more with your internal APIs and attributes instead of locking them out by default;&lt;/li&gt;
  &lt;li&gt;use documentation of protected fields to guide subclasses instead of trying to force access control with private attributes;&lt;/li&gt;
  &lt;li&gt;only consider using private attributes to avoid naming conflicts with subclasses that are out of your control;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;inherit-from-collectionsabc-for-custom-container-types&quot;&gt;3.7 inherit from collections.abc for custom container types&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;inherit directly from python’s container types (list, dict) for simple use cases;&lt;/li&gt;
  &lt;li&gt;beaware of the large number of methods required to implement custom container types correctly;&lt;/li&gt;
  &lt;li&gt;have your custom container types inherit from the interfaces defined in collections.abc to ensure that your classes match required interfaces and behaviors;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;metaclasses-and-attributes&quot;&gt;4. metaclasses and attributes&lt;/h2&gt;

&lt;h3 id=&quot;use-plain-attributes-instead-of-get-and-set-methods&quot;&gt;4.1 use plain attributes instead of get and set methods&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;define new class interfaces using simple public attributes and avoid set and get methods;&lt;/li&gt;
  &lt;li&gt;use @property to define special behavior when attributes are accessed on your objects, if necessary;&lt;/li&gt;
  &lt;li&gt;follow the rule of least surprise and avoid weird side effects in your @property methods;&lt;/li&gt;
  &lt;li&gt;ensure that @property methods are fast, do slow or complex work using normal methods;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;consider-property-instead-of-refactoring-attributes&quot;&gt;4.2 consider @property instead of refactoring attributes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;use @property to give existing instance attributes new functionality;&lt;/li&gt;
  &lt;li&gt;make incremental progress toward better data models by using @property;&lt;/li&gt;
  &lt;li&gt;consider refactoring a class and all call sites when you find yourself using @property too heavily;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-descriptors-for-reusable-property-methods&quot;&gt;4.3 use descriptors for reusable @property methods&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;reuse the behavior and validation of @property methods by defining your own descriptor classes;&lt;/li&gt;
  &lt;li&gt;use WeakKeyDict to ensure that your descriptor classes don’t cause memory leaks;&lt;/li&gt;
  &lt;li&gt;don’t get bogged down trying to understand exactly how &lt;code class=&quot;highlighter-rouge&quot;&gt;__getattribute__&lt;/code&gt; uses the descriptor protocol for getting and setting attrbutes;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-getattr-getattribute-and-setattr-for-lazy-attributes&quot;&gt;4.4 use &lt;code class=&quot;highlighter-rouge&quot;&gt;__getattr__&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;__getattribute__&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;__setattr__&lt;/code&gt; for lazy attributes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;__getattr__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__setattr__&lt;/code&gt; to lazily load and save attributes for an object;&lt;/li&gt;
  &lt;li&gt;understand that &lt;code class=&quot;highlighter-rouge&quot;&gt;__getattr__&lt;/code&gt; only gets called once when accessing a missing attribute, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;__getattribute__&lt;/code&gt; gets called every time an attribute is accessed;&lt;/li&gt;
  &lt;li&gt;avoid infinite recursion in &lt;code class=&quot;highlighter-rouge&quot;&gt;__getattribute__&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;__setattr__&lt;/code&gt; by using methods from super() to access instance attributes directly;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;validate-subclass-with-metaclass&quot;&gt;4.5 validate subclass with metaclass&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;use metaclasses to ensure that subclasses are well formed at the time they are defined, before objects of their type are constructed;&lt;/li&gt;
  &lt;li&gt;metaclasses have slightly different syntax in python 2 and python 3;&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;__new__&lt;/code&gt; method of metaclasses is run after the class statement’s entire body has been processed;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;register-class-existence-with-metaclasses&quot;&gt;4.6 register class existence with metaclasses&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;class registeration is a helpful pattern for building modular python programs;&lt;/li&gt;
  &lt;li&gt;metaclasses let you run register code automatically each time your base class is subclassed in a program;&lt;/li&gt;
  &lt;li&gt;using metaclasses for class register avoids errors by ensuring that you never miss a register call;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;annotate-class-attributes-with-metaclasses&quot;&gt;4.7 annotate class attributes with metaclasses&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;metaclasses enable you to modify a class’s attributes before the class is fully defined;&lt;/li&gt;
  &lt;li&gt;descriptors and metaclasses make a powerful combination for declarative behavior and runtime introspection;&lt;/li&gt;
  &lt;li&gt;you can avoid both memory leaks and the weakref module by using metaclasses along with descriptors;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;concurrenc-and-parallelism&quot;&gt;5. concurrenc and parallelism&lt;/h2&gt;

&lt;h3 id=&quot;use-subprocess-to-manage-child-processes&quot;&gt;5.1 use subprocess to manage child processes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;use the subprocess module to run child processes and manage their input and output manually;&lt;/li&gt;
  &lt;li&gt;child processes run in parallel with the python interpreter, enabling you to maximize your cpu usage;&lt;/li&gt;
  &lt;li&gt;use the timeout parameter with communicate to avoid deadlocks and hanging child proceses;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-threads-for-blocking-io-avoid-for-parallelism&quot;&gt;5.2 use threads for blocking i/o, avoid for parallelism&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;python threads can’t run bytecode in parallel on multiple cpu cores because of the glow interpreter lock;&lt;/li&gt;
  &lt;li&gt;python threads are still useful despite the gil because they provide an easy way to do multiple things at seemingly the same time;&lt;/li&gt;
  &lt;li&gt;use python threads to make multiple system calls in parallel, this allows you to do blocking io at the same time as computation;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-lock-to-prevent-data-races-in-threads&quot;&gt;5.3 use lock to prevent data races in threads&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;even though python has global interpreter lock, you’re still responsible for protecting against data races between the threads in your programs;&lt;/li&gt;
  &lt;li&gt;your programs will corrupt their data structures if you allow multiple threads to modify the same objects without locks;&lt;/li&gt;
  &lt;li&gt;the lock class in the threading built-in module is python’s standard mutual exclusion lock implementation;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-queue-to-coordinate-work-between-threads&quot;&gt;5.4 use queue to coordinate work between threads&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;pipelines are a great way to organize sequences of work that run concurrently using multiple python threads;&lt;/li&gt;
  &lt;li&gt;be aware of the many problems in building concurrent pipelines: busy waiting, stopping workers and memory explosion;&lt;/li&gt;
  &lt;li&gt;the queue class has all of the facilities you need to build robust pipelines: blocking operations, buffer sizes and joining;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;consider-coroutines-to-run-many-functions-concurrently&quot;&gt;5.5 consider coroutines to run many functions concurrently&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;coroutines provie an efficient way to run tens of thousands of functions seemingly at the same time;&lt;/li&gt;
  &lt;li&gt;within a generator, the value of the yield expression will be whatever value was passed to the generator’s send method from the exterior code;&lt;/li&gt;
  &lt;li&gt;coroutines give you a powerful tool for separating the core logic of your program from its interaction with the surrounding environment;&lt;/li&gt;
  &lt;li&gt;python 2 doesn’t support yield from or returning values from generators;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;consider-concurrentfutures-for-true-parallelism&quot;&gt;5.6 consider concurrent.futures for true parallelism&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;moving cpu bottlenecks to c-extension modules can be an effective way to improve performance while maximizing your investment in python code. however, the cost of doing so is high and may introduce bugs;&lt;/li&gt;
  &lt;li&gt;the multiprocessing module provides powerful tools that can parallelize certain types of python computation with minimal effort;&lt;/li&gt;
  &lt;li&gt;the power of multiprocessing is best accessed through the concurrent.futures built-in module and its simple processpollexecutor class;&lt;/li&gt;
  &lt;li&gt;the advanced parts of the multiprocessing module should be avoided because they are so complex;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;built-in-modules&quot;&gt;6. built-in modules&lt;/h2&gt;

&lt;h3 id=&quot;define-functions-decorators-with-functoolswraps&quot;&gt;6.1 define functions decorators with functools.wraps&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;decorators are python syntax for allowing one function to modify another function at runtime;&lt;/li&gt;
  &lt;li&gt;using decorators can cause strange behaviors in tools that do introspection, such as debuggers;&lt;/li&gt;
  &lt;li&gt;use the &lt;code class=&quot;highlighter-rouge&quot;&gt;wraps&lt;/code&gt; decorator from the &lt;code class=&quot;highlighter-rouge&quot;&gt;functools&lt;/code&gt; built-in modules when you define your own decorators to avoid any issues;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;consider-contextlib-and-with-statements-for-reusable-tryfinally-behavior&quot;&gt;6.2 consider contextlib and with statements for reusable try/finally behavior&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;the with statement allow you to reuse logic from try/finally blocks and reduce visual noise;&lt;/li&gt;
  &lt;li&gt;the contextlib built-in module provides a contextmanager decorator that makes it easy to use your own functions in with statements;&lt;/li&gt;
  &lt;li&gt;the value yielded by context managers is supplied to the as part of the with statement. it’s useful for letting your code directly access the cause of the special context;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;make-pickle-reliable-with-copyreg&quot;&gt;6.3 make pickle reliable with copyreg&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;s serialization format is unsafe by design. the serialzed data contains what is essentially a program that describes how to reconstruct the original python object. this means a malicious pickle payload could be used to compromise any part of the python program that attempts to deserialize it.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;the pickle module is only useful for serializing and deserializing objects between trusted programs;&lt;/li&gt;
  &lt;li&gt;the pickle module may break down when used for more than trivial use cases;&lt;/li&gt;
  &lt;li&gt;use the copyreg built-in module with pickle to add missing attribute values, allow versioning of classes, and provide stable import paths;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-datetime-instead-of-time-for-local-clocks&quot;&gt;6.4 use datetime instead of time for local clocks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;avoid using the time module for translating between different time zones;&lt;/li&gt;
  &lt;li&gt;use the datetime built-in module along with the pytz module to reiliably convert between times in different time zones;&lt;/li&gt;
  &lt;li&gt;always represent time in utc and do conversions to local time as the final step before presentation;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-built-in-algorithms-and-data-structures&quot;&gt;6.5 use built-in algorithms and data structures&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;use python’s built-in modules for algorithms and data structures;&lt;/li&gt;
  &lt;li&gt;don’t reimplement this functionality yourself;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-decimal-when-precising-is-paramount&quot;&gt;6.6 use decimal when precising is paramount&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;python has built-in types and classes in modules that can represent practically every type of numerical value;&lt;/li&gt;
  &lt;li&gt;the decimal class is ideal for situations that require high precision and exact rounding behavior, such as computations of monetary values;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;know-where-to-find-community-built-modules&quot;&gt;6.7 know where to find community-built modules&lt;/h3&gt;

&lt;h2 id=&quot;collaboration&quot;&gt;7. collaboration&lt;/h2&gt;

&lt;h3 id=&quot;write-docstring-for-every-function-class-and-module&quot;&gt;7.1 write docstring for every function, class and module&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;write documentation for every module, class and function using docstrings. keep them up to date as your code changes;&lt;/li&gt;
  &lt;li&gt;for modules, introduce the contents of the module and any important classes or functions all users should know about;&lt;/li&gt;
  &lt;li&gt;for classes, document behavior, important attributes and subclass behavior in the docstring following the class statement;&lt;/li&gt;
  &lt;li&gt;for functions and methods, document every argument, returned value, raised exception and other behaviors in the docstring following the def statement;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-packages-to-organize-modules-and-provide-stable-apis&quot;&gt;7.2 use packages to organize modules and provide stable apis&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;packages in python are modules that contain other modules, packages allow you to organize your code into separate, non-conflicting namespaces with unique absolute module names;&lt;/li&gt;
  &lt;li&gt;simple packages are defined by adding an &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file to a directory that contains other source files. these files become the child modules of the directory’s package, package directories may also contain other packages;&lt;/li&gt;
  &lt;li&gt;you can provide an explicit api for a module by listing its publicly visible names in its &lt;code class=&quot;highlighter-rouge&quot;&gt;__all__&lt;/code&gt; special attribute;&lt;/li&gt;
  &lt;li&gt;you can hide a package’s internal implementation by only importing public names in the package’s &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file or by naming internal-only members with a leading underscore;&lt;/li&gt;
  &lt;li&gt;when collaborating within a single team or on a single codebase, using &lt;code class=&quot;highlighter-rouge&quot;&gt;__call__&lt;/code&gt; for explicit apis is probably unnecessary;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;define-a-root-exception-to-insulate-callers-from-apis&quot;&gt;7.3 define a root exception to insulate callers from apis&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;define root exceptions for your modules allows api consumers to insulate themselves from your api;&lt;/li&gt;
  &lt;li&gt;catching root exception can help your modules allows api consumers to insulate themselves from your api;&lt;/li&gt;
  &lt;li&gt;catching the python exception base class can help you find bugs in api implementation;&lt;/li&gt;
  &lt;li&gt;intermediate root exceptions let you add more specific types of exceptions in the future without breaking your api consumers;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;know-how-to-break-circular-dependecies&quot;&gt;7.4 know how to break circular dependecies&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# dialog.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;save_dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# app.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dialog&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Prefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;prefs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then if you use app.py in your project, you’ll absolutely get an error like bellow:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipython&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f8537898a049&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chenshan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Desktop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dialog&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# import ipdb; ipdb.set_trace()&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Prefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chenshan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Desktop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save_dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;module&#39;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;prefs&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the problem with a circular dependency is that the attributes of a module aren’t defined until the code for those attributes has executed(after step 5), but the module can be loaded with the import statement immediately after it’s inserted into sys.modules(after step 4)&lt;/p&gt;

&lt;p&gt;in the example above,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the app.py import dialog before doing anything&lt;/li&gt;
  &lt;li&gt;then, dialog.py import app firstly, currently the &lt;code class=&quot;highlighter-rouge&quot;&gt;imported app is just an empty module&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;then, in dailog.py, the &lt;code class=&quot;highlighter-rouge&quot;&gt;save_dialog = Dialog(app.prefs.get(&quot;hello&quot;))&lt;/code&gt;, at that time, we’re sure that there are really a module named &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; exists in current runtime, but it’s an empty module, so will raise an attribute error like this.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;python import machinery:
    &lt;ul&gt;
      &lt;li&gt;searches for your module in locations from sys.path&lt;/li&gt;
      &lt;li&gt;loads the code from the module and ensures that it compiles&lt;/li&gt;
      &lt;li&gt;creates a corresponding empty module object&lt;/li&gt;
      &lt;li&gt;inserts the module into sys.modules&lt;/li&gt;
      &lt;li&gt;runs the code in the module object to define its contents&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:4000/python-cycle-import/&quot;&gt;sever ways to break circular imports&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;reorder imports&lt;/li&gt;
      &lt;li&gt;import first, config second, run last&lt;/li&gt;
      &lt;li&gt;dynamic import&lt;/li&gt;
      &lt;li&gt;re-strucuture or re-factory your code&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-virtual-env-for-isonated-and-reproducible-dependences&quot;&gt;7.5 use virtual env for isonated and reproducible dependences&lt;/h3&gt;

&lt;h2 id=&quot;production&quot;&gt;8. Production&lt;/h2&gt;

&lt;h3 id=&quot;consider-module-scoped-code-to-configure-deployment-env&quot;&gt;8.1 consider module-scoped code to configure deployment env&lt;/h3&gt;

&lt;h3 id=&quot;use-repr-string-for-debugging-output&quot;&gt;8.2 use repr string for debugging output&lt;/h3&gt;

&lt;h3 id=&quot;test-everything-with-unittest&quot;&gt;8.3 test everything with unittest&lt;/h3&gt;

&lt;h3 id=&quot;consider-interactive-debugging-with-pdb&quot;&gt;8.4 consider interactive debugging with pdb&lt;/h3&gt;

&lt;h3 id=&quot;profile-before-optimizing&quot;&gt;8.5 profile before optimizing&lt;/h3&gt;

&lt;h3 id=&quot;use-tracemalloc-to-understand-memory-usage-and-leaks&quot;&gt;8.6 use tracemalloc to understand memory usage and leaks&lt;/h3&gt;

</content>
   </entry>
   
   <entry>
     <title>celery 笔记</title>
     <link href="/hello-celery"/>
     <updated>2015-12-18T00:00:00+08:00</updated>
     <id>/hello-celery</id>
     <content type="html">&lt;h2 id=&quot;hello-celery&quot;&gt;1. hello, celery&lt;/h2&gt;

&lt;p&gt;three questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;what is celery?&lt;/li&gt;
  &lt;li&gt;why do we need celery?&lt;/li&gt;
  &lt;li&gt;what features does celery have?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-celery&quot;&gt;1.1 what is celery?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;First&lt;/code&gt;, celery is a distributed task queue [ a distributed system to process messages].&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Second&lt;/code&gt;, it provides operations with the tools required to maintain such a system.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/mher/flower&quot;&gt;flower&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://policystat.github.io/jobtastic/&quot;&gt;jobtastic&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Third&lt;/code&gt;, it was built for Dijango Apps in the early, but scaled since version 0.8.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fourth&lt;/code&gt;, it focus on real-time processing, while also supporting task scheduling.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-do-we-need-celery&quot;&gt;1.2 why do we need celery?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;run something in the background.&lt;/li&gt;
  &lt;li&gt;run something after the web request is done.&lt;/li&gt;
  &lt;li&gt;making something is done by executing it asynchronously and using retries.&lt;/li&gt;
  &lt;li&gt;schedule periodic task.&lt;/li&gt;
  &lt;li&gt;distributed computing.&lt;/li&gt;
  &lt;li&gt;parallel executing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-features-does-celery-have&quot;&gt;1.3 what features does celery have?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;simple&lt;/code&gt;:
write in python, easily configure.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;high available&lt;/code&gt;: retry mechanism, independent broker HA.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fast&lt;/code&gt;: process millions of tasks one minute.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flexible&lt;/code&gt;: Almost every part of Celery can be extended or used on its own, Custom pool implementations, serializers, compression schemes, logging, schedulers, consumers, producers, autoscalers, broker transports and much more.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monitoring&lt;/code&gt;: A stream of monitoring events is emitted by workers and is used by built-in and external tools to tell you what your cluster is doing – in real-time.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;auto reloading&lt;/code&gt;: In development workers can be configured to automatically reload source code as it changes.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;workflows&lt;/code&gt;:  Simple and complex workflows can be composed using a set of powerful primitives we call the “canvas”, including grouping, chaining, chunking and more.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;auto scaling&lt;/code&gt;: Dynamically resizing the worker pool depending on load, or custom metrics specified by the user, used to limit memory usage in shared hosting/cloud environments or to enforce a given quality of service.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Time &amp;amp; Rate Limits&lt;/code&gt;: You can control how many tasks can be executed per second/minute/hour, or how long a task can be allowed to run, and this can be set as a default, for a specific worker or individually for each task type.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduling&lt;/code&gt;: You can specify the time to run a task in seconds or a datetime, or or you can use periodic tasks for recurring events based on a simple interval, or crontab expressions supporting minute, hour, day of week, day of month, and month of year.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Resource leak protection&lt;/code&gt;:&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;User components&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-does-celery-work&quot;&gt;2 how does celery work?&lt;/h2&gt;

&lt;h3 id=&quot;some-terms-in-message-queue-and-celery&quot;&gt;2.1 some terms in message queue and celery&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;celery task&lt;/code&gt;: a serialized task info which will be scheduled to done by celery,
generally it contains some meta data, like bellow:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4cc7438e-afd4-4f8f-a2f3-f46567e7ca77&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;task&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;celery.task.PingTask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;kwargs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;retries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eta&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2009-11-17T12:30:56.527191&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;producer&lt;/code&gt;: the one who send task messages to the broker,
generally it is a celery client.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;consumer&lt;/code&gt;: fetch task messages from queues and process them.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;broker&lt;/code&gt;: the one who receives task messages from producer and route different
messages to different queues.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exchange&lt;/code&gt;: exchange, or a router, the one who really do message receiving from producer
and dispatching message to queues. two things should be taken in mind about exchange:
    &lt;ul&gt;
      &lt;li&gt;one message from producer can be routed to zero or more queues;&lt;/li&gt;
      &lt;li&gt;you can set route rules for the exchange, called &lt;a href=&quot;&quot;&gt;bindings&lt;/a&gt;;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;queue&lt;/code&gt;: buffer for store task messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-celery-workflow&quot;&gt;2.2 the celery workflow&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../images/how_celery_works.jpg&quot; alt=&quot;how_celery_works.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-workflow-deployment&quot;&gt;2.3 the workflow deployment&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../images/celery-deploy.jpg&quot; alt=&quot;celery-deploy.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-celery&quot;&gt;3. install celery&lt;/h2&gt;

&lt;p&gt;two possible ways to install celery.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install the latest stable celery and its dependences&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;chenshan@mac007:~/Desktop&lt;span class=&quot;nv&quot;&gt;$sudo&lt;/span&gt; pip install -U celery
...
...
...
Installing collected packages: celery, kombu, billiard, amqp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the celery dependences info is listed here: &lt;a href=&quot;http://docs.celeryproject.org/en/latest/faq.html#does-celery-have-many-dependencies&quot;&gt;Does Celery have many dependencies&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install celery with bundles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Celery also defines a group of bundles that can be used to install Celery and the dependencies for a given feature.&lt;/p&gt;

&lt;p&gt;You can specify these in your requirements or on the pip comand-line by using brackets. Multiple bundles can be specified by separating them by commas. for example, using the command &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install &quot;celery[librabbitmq,redis,auth,msgpack]&quot;&lt;/code&gt; to install celery with librabbitmq, redis, auth, msgpack libriaries.&lt;/p&gt;

&lt;p&gt;all bundles command can be find here: &lt;a href=&quot;http://docs.celeryproject.org/en/latest/getting-started/introduction.html#bundles&quot;&gt;bundles&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;参考文档&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;celery official site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://abhishek-tiwari.com/post/amqp-rabbitmq-and-celery-a-visual-guide-for-dummies&quot;&gt;http://abhishek-tiwari.com/post/amqp-rabbitmq-and-celery-a-visual-guide-for-dummies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zapier.com/blog/async-celery-example-why-and-how/&quot;&gt;Async Celery by Example: Why and How&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.vmware.com/vfabric/2013/04/how-instagram-feeds-work-celery-and-rabbitmq.html&quot;&gt;How Instagram Feeds Work: Celery and RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23916413/celery-parallel-distributed-task-with-multiprocessing&quot;&gt;stackoverflow: Celery parallel distributed task with multiprocessing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.avilpage.com/2014/11/scaling-celery-sending-tasks-to-remote.html&quot;&gt;[Scaling Celery] Sending Tasks To Remote Machines!
&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lc0.github.io/blog/2013/05/01/celery-messaging-at-scale-at-instagram/&quot;&gt;Celery Messaging at Scale at Instagram&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://denibertovic.com/posts/celery-best-practices/&quot;&gt;CELERY - BEST PRACTICES&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://denibertovic.com/talks/celery-best-practices/#/&quot;&gt;CELERY - BEST PRACTICES slide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/siddontang/article/details/34447003&quot;&gt;CELERY - BEST PRACTICES 中文&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.opscoder.info/queryset_lazy.html&quot;&gt;从一次celery踩坑中谈谈Queryset的懒加载&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6192265/send-log-messages-from-all-celery-tasks-to-a-single-file&quot;&gt;stackoverflow: Send log messages from all celery tasks to a single file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>shell 编程总结三，函数</title>
     <link href="/shell-programming-summary-3"/>
     <updated>2015-11-22T00:00:00+08:00</updated>
     <id>/shell-programming-summary-3</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;1. 定义&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。&lt;/li&gt;
  &lt;li&gt;2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;函数返回值在调用该函数后通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt; 来获得。
注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; funcname &lt;span class=&quot;o&quot;&gt;[()]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    action;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;int;]

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2. 函数参数&lt;/h2&gt;

&lt;p&gt;在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…
带参数的函数示例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
funWithParam&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The value of the first parameter is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; !&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The value of the second parameter is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; !&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The value of the tenth parameter is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$10&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; !&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The value of the tenth parameter is &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; !&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The value of the eleventh parameter is &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; !&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The amount of the parameters is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The string of the parameters is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; !&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
funWithParam 1 2 3 4 5 6 7 8 9 34 73&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&amp;gt;=10时，需要使用${n}来获取参数。
另外，还有几个特殊字符用来处理参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt;	传递到脚本的参数个数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt;	以一个单字符串显示所有向脚本传递的参数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;	脚本运行的当前进程ID号&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$!&lt;/code&gt;	后台运行的最后一个进程的ID号&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$@&lt;/code&gt;	与 &lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt; 相同，但是使用时加引号，并在引号中返回每个参数。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$-&lt;/code&gt;	显示Shell使用的当前选项，与set命令功能相同。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt;	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$0&lt;/code&gt;  Shell本身的文件名&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;参考文档&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.runoob.com/linux/linux-shell.html&quot;&gt;Shell 教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/chengmo/archive/2010/10/02/1841355.html&quot;&gt;linux shell 字符串操作（长度，查找，替换）详解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/ithomer/article/details/6836382&quot;&gt;Linux 之 shell 比较运算符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
   </entry>
   
   <entry>
     <title>shell 编程总结二，test 命令，流程控制</title>
     <link href="/shell-programming-summary-2"/>
     <updated>2015-11-18T00:00:00+08:00</updated>
     <id>/shell-programming-summary-2</id>
     <content type="html">&lt;h2 id=&quot;test-&quot;&gt;1. test 命令&lt;/h2&gt;

&lt;p&gt;Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1.1 数值测试&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-eq : equal&lt;/code&gt;: 等于&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-ne : non-equal&lt;/code&gt;: 不等于&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-gt : great than&lt;/code&gt;: 大于&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-ge : great or equal&lt;/code&gt;: 大于或等于&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-lt : lower than&lt;/code&gt;: 小于&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-le : lower or equal&lt;/code&gt;: 小于或等于&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;span class=&quot;nv&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;num1] -eq &lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;num2]
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;The two numbers are equal!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;The two numbers are not equal!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.2 字符串测试&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;: 等于&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt;: 不等于&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-z : zero&lt;/code&gt;: 字符串长度为零，则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n : non-zero&lt;/code&gt;: 字符串长度不为零，则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var-DEFAULT}&lt;/code&gt;:	如果var没有被声明, 那么就以$DEFAULT作为其值 *&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var:-DEFAULT}&lt;/code&gt;: 如果var没有被声明, 或者其值为空, 那么就以$DEFAULT作为其值 *&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var=DEFAULT}&lt;/code&gt;:	如果var没有被声明, 那么就以$DEFAULT作为其值 *&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var:=DEFAULT}&lt;/code&gt;: 如果var没有被声明, 或者其值为空, 那么就以$DEFAULT作为其值 *&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var+OTHER}&lt;/code&gt;:	如果var声明了, 那么其值就是$OTHER, 否则就为null字符串&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var:+OTHER}&lt;/code&gt;:	如果var被设置了, 那么其值就是$OTHER, 否则就为null字符串&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var?ERR_MSG}&lt;/code&gt;:	如果var没被声明, 那么就打印$ERR_MSG *&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var:?ERR_MSG}&lt;/code&gt;:	如果var没被设置, 那么就打印$ERR_MSG *&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;span class=&quot;nv&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;num2
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;The two strings are equal!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;The two strings are not equal!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.3 文件测试&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e  : exist&lt;/code&gt;: 如果文件存在则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r  : readable&lt;/code&gt;: 如果文件存在且可读则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-w  : writable&lt;/code&gt;: 如果文件存在且可写则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-x  : execute&lt;/code&gt;: 如果文件存在且可执行则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s  : &lt;/code&gt;: 如果文件存在且至少有一个字符则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d  : directory&lt;/code&gt;: 如果文件存在且为目录则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f  : file&lt;/code&gt;: 如果文件存在且为普通文件则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-c  : &lt;/code&gt;: 如果文件存在且为字符型特殊文件则为真&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-b  : block&lt;/code&gt;: 如果文件存在且为块特殊文件则为真&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /bin
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -e ./bash
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;The file already exists!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;The file does not exists!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：”!”最高，”-a”次之，”-o”最低。例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /bin
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -e ./notFile -o ./bash
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;One file exists at least!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Both dose not exists!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-3&quot;&gt;2. 流程控制&lt;/h2&gt;

&lt;h3 id=&quot;if-elif-else-fi-&quot;&gt;2.1 if elif else fi 控制符&lt;/h3&gt;

&lt;p&gt;完整的格式如下，其中，&lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 可根据实际情况决定是否需要。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;condition1
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;command1
&lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;condition2
    command2
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;commandN
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;实例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;2&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;3]
&lt;span class=&quot;nv&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;1+5]
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;num1] -eq &lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;num2]
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;两个数字相等!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;两个数字不相等!&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;for-&quot;&gt;2.2 for 循环&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;var &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;item1 item2 ... itemN
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;command1
    command2
    ...
    commandN
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;while-&quot;&gt;2.3 while 语句&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;condition
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$int&lt;/span&gt;&amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$int&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;int++&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按&lt;ctrl-d&gt;结束循环。&lt;/ctrl-d&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;按下 &amp;lt;CTRL-D&amp;gt; 退出&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s1&quot;&gt;&#39;输入你最喜欢的电影名: &#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;FILM
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;是的！&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; 是一部好电影&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;无限循环语法格式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; :
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 或者&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 或者&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; ; ; &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;until-&quot;&gt;2.4 until 循环&lt;/h3&gt;

&lt;p&gt;until循环执行一系列命令直至条件为真时停止。
until循环与while循环在处理方式上刚好相反。
一般while循环优于until循环，但在某些时候—也只是极少数情况下，until循环更加有用。
until 语法格式:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;until &lt;/span&gt;condition
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;case-&quot;&gt;2.5 case 语句&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; 值 &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;模式1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    command1
    command2
    ...
    commandN
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
模式2）
    command1
    command2
    ...
    commandN
    ;;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;输入 1 到 4 之间的数字:&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;你输入的数字为:&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;aNum
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$aNum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;你选择了 1&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    2&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;你选择了 2&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    3&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;你选择了 3&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    4&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;你选择了 4&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;你没有输入 1 到 4 之间的数字&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;break--continue-&quot;&gt;2.6 break 和 continue 语句&lt;/h3&gt;

&lt;p&gt;break命令允许跳出所有循环（终止执行后面的所有循环）。
下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; :
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;输入 1 到 5 之间的数字:&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;aNum
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$aNum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
        &lt;/span&gt;1|2|3|4|5&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;你输入的数字为 &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$aNum&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; :
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;输入 1 到 5 之间的数字: &quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;aNum
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$aNum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
        &lt;/span&gt;1|2|3|4|5&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;你输入的数字为 &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$aNum&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;你输入的数字不是 1 到 5 之间的!&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue
            &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;游戏结束&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-4&quot;&gt;参考文档&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.runoob.com/linux/linux-shell.html&quot;&gt;Shell 教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/chengmo/archive/2010/10/02/1841355.html&quot;&gt;linux shell 字符串操作（长度，查找，替换）详解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/ithomer/article/details/6836382&quot;&gt;Linux 之 shell 比较运算符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
   </entry>
   
   <entry>
     <title>shell 编程总结一，概念，变量</title>
     <link href="/shell-programming-summary"/>
     <updated>2015-11-17T00:00:00+08:00</updated>
     <id>/shell-programming-summary</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;1. 基本概念&lt;/h2&gt;

&lt;h3 id=&quot;shell&quot;&gt;1.1 什么是 shell&lt;/h3&gt;

&lt;p&gt;业界所说的shell通常都是指shell脚本，但要知道，shell和shell script是两个不同的概念:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shell 是一个用C语言编写的程序，它是用户使用Linux的桥梁, 这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。&lt;/li&gt;
  &lt;li&gt;Shell 也是一种命令语言和一种程序设计语言，Shell 脚本（shell script），是一种用shell编写的脚本程序。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;shell-&quot;&gt;1.2 Shell 环境&lt;/h3&gt;

&lt;p&gt;Shell 编程跟java、php编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。Linux的Shell种类众多，常见的有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bourne Shell（/usr/bin/sh或/bin/sh）&lt;/li&gt;
  &lt;li&gt;Bourne Again Shell（/bin/bash）&lt;/li&gt;
  &lt;li&gt;C Shell（/usr/bin/csh）&lt;/li&gt;
  &lt;li&gt;K Shell（/usr/bin/ksh）&lt;/li&gt;
  &lt;li&gt;Shell for Root（/sbin/sh）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大多数情况下提到 shell 都是指 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash在日常工作中被广泛使用。同时，
Bash也是大多数Linux系统默认的Shell。
在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/code&gt; ，它同样也可以改为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/code&gt;。
&lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt; 告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序。&lt;/p&gt;

&lt;h3 id=&quot;shell--1&quot;&gt;1.3 shell 脚本的执行&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;作为可执行程序&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;chmod +x ./test.sh  &lt;span class=&quot;c&quot;&gt;#使脚本具有执行权限&lt;/span&gt;
./test.sh  &lt;span class=&quot;c&quot;&gt;#执行脚本&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;注意，一定要写成&lt;code class=&quot;highlighter-rouge&quot;&gt;./test.sh&lt;/code&gt;，而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;test.sh&lt;/code&gt;，运行其它二进制的程序也一样，直接写&lt;code class=&quot;highlighter-rouge&quot;&gt;test.sh&lt;/code&gt;，linux系统会去PATH里寻找有没有叫&lt;code class=&quot;highlighter-rouge&quot;&gt;test.sh&lt;/code&gt;的，
而只有&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin, /sbin, /usr/bin，/usr/sbin&lt;/code&gt;等在PATH里，你的当前目录通常不在PATH里，所以写成&lt;code class=&quot;highlighter-rouge&quot;&gt;test.sh&lt;/code&gt;是会找不到命令的，
要用&lt;code class=&quot;highlighter-rouge&quot;&gt;./test.sh&lt;/code&gt;告诉系统说，就在当前目录找。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作为 [shell] 解释器参数 : 直接运行解释器，其参数就是shell脚本的文件名&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;/bin/sh test.sh
/bin/php test.php&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;shell--2&quot;&gt;2. shell 变量&lt;/h2&gt;

&lt;p&gt;定义变量时，变量名不加美元符号:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;runoob.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;注意，变量名和等号之间不能有空格，同时，变量名的命名须遵循如下规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首个字符必须为字母（a-z，A-Z）。&lt;/li&gt;
  &lt;li&gt;中间不能有空格，可以使用下划线。&lt;/li&gt;
  &lt;li&gt;不能使用标点符号。&lt;/li&gt;
  &lt;li&gt;不能使用bash里的关键字（可用help命令查看保留关键字）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了显式地直接赋值，还可以用语句给变量赋值，如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;file &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ls /etc&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;使用一个定义过的变量，只要在变量名前面加美元符号即可，如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qinjx&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$your_name&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;skill &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Ada Coffe Action Java &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I am good at &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;skill&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Script&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果不给skill变量加花括号，写成 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;I am good at $skillScript&quot;&lt;/code&gt;，解释器就会把$skillScript当成一个变量（其值为空），
代码执行结果就不是我们期望的样子了。推荐给所有变量加上花括号，这是个好的编程习惯。
已定义的变量，可以被重新定义，如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tom&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$your_name&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alibaba&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$your_name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.1 字符串&lt;/h3&gt;

&lt;p&gt;字符串可以用单引号，也可以用双引号，也可以不用引号。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单引号
    &lt;ul&gt;
      &lt;li&gt;单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；&lt;/li&gt;
      &lt;li&gt;单引号字串中不能出现单引号（对单引号使用转义符后也不行）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;this is a string&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;双引号
    &lt;ul&gt;
      &lt;li&gt;双引号里可以有变量&lt;/li&gt;
      &lt;li&gt;双引号里可以出现转义字符&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;qinjx&#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello, I know your are &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$your_name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;! &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;拼接字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qinjx&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello, &quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$your_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; !&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;greeting_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello, &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; !&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$greeting&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$greeting_1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;获取字符串长度&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;abcd&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#输出 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;提取子字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alibaba is a great company&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;:1:4&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#输出liba&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;查找子字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alibaba is a great company&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;expr index &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$string&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; is&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2.2 数组&lt;/h3&gt;

&lt;p&gt;bash支持一维数组（不支持多维数组），并且没有限定数组的大小。
类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定义数组&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 在Shell中，用括号来表示数组，数组元素用&quot;空格&quot;符号分割开。定义数组的一般形式为：数组名=(值1 值2 ... 值n)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;array_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;value0 value1 value2 value3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;读取数组&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 读取数组元素值的一般格式是：${数组名[下标]}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;valuen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;array_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[n]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 使用@符号可以获取数组中的所有元素，例如：&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;array_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;获取数组的长度&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 取得数组元素的个数&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;array_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 或者&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;array_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 取得数组单个元素的长度&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;lengthn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;array_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[n]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;echo-&quot;&gt;3. echo 的用途&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;显示普通字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It is a test&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 这里的双引号完全可以省略，以下命令与上面实例效果一致&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;It is a &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;显示转义字符&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;chenshan@mac007:~/Desktop/github/litaotao.github.io&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;It is a test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;It is a test&quot;&lt;/span&gt;

chenshan@mac007:~/Desktop/github/litaotao.github.io&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;It is a &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;It is a test&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;输入变量：read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;name
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; It is a test&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;显示换行/不换行&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 换行&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;OK!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# -e 开启转义&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It it a test&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 不换行&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;OK! &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# -e 开启转义 \c 不换行&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It is a test&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;显示结果定向至文件&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 以重写文件的方式重定向&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It is a test&quot;&lt;/span&gt; &amp;gt; myfile

&lt;span class=&quot;c&quot;&gt;# 以添加到文件尾的方式重定向&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It is a test&quot;&lt;/span&gt; &amp;gt;&amp;gt; myfile&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;显示命令执行结果&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;chenshan@mac007:~/Desktop/github/litaotao.github.io&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; -e &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\n&#39;&lt;/span&gt;  &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
Tue Nov 17 22:21:05 CST 2015
 Tue Nov 17 22:21:05 CST 2015&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-3&quot;&gt;参考文档&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.runoob.com/linux/linux-shell.html&quot;&gt;Shell 教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/chengmo/archive/2010/10/02/1841355.html&quot;&gt;linux shell 字符串操作（长度，查找，替换）详解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/ithomer/article/details/6836382&quot;&gt;Linux 之 shell 比较运算符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
   </entry>
   
   <entry>
     <title>python 循环引用</title>
     <link href="/python-cycle-import"/>
     <updated>2015-11-09T00:00:00+08:00</updated>
     <id>/python-cycle-import</id>
     <content type="html">&lt;h2 id=&quot;import-module-&quot;&gt;1. import module 流程&lt;/h2&gt;

&lt;p&gt;首先，明确一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;import module_name&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;from module_name import module_element&lt;/code&gt; 是两条可执行的语句。
其次，&lt;code class=&quot;highlighter-rouge&quot;&gt;sys.modules&lt;/code&gt; 里记录了当前 run time 下所有已经导出的 module。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果 module_name 不在 sys.modules 中，那 import module_name 将会执行:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sys.modules[ module_name ] = [empty pyc file]&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;execute module_name to generate a module_name.pyc file&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sys.modules[ module_name ] = module_name.pyc file path&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果 module_name 已经在 sys.moudles 中，那会去 load 对应的 pyc file，但关键就在这里的 pyc 文件，有两种情况:
    &lt;ul&gt;
      &lt;li&gt;上面第一步生成的 pyc 文件，大多数循环引用导致 AttributeError 错误的原因；&lt;/li&gt;
      &lt;li&gt;上面第三部生成的 pyc 文件，正常情况，不会出异常。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;2. 如何避免循环引用&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;延迟导入(lazy import)&lt;/li&gt;
  &lt;li&gt;将 &lt;code class=&quot;highlighter-rouge&quot;&gt;from xxx import yyy&lt;/code&gt; 改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;import xxx;xxx.yyy&lt;/code&gt; 来访问的形式，这种办法并不能解决所有场景下的问题&lt;/li&gt;
  &lt;li&gt;合理组织代码&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考文档&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/744373/circular-or-cyclic-imports-in-python&quot;&gt;Circular (or cyclic) imports in Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/handsomekang/article/details/19010407&quot;&gt;解决循环import的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
   </entry>
   
   <entry>
     <title>一行代码，打造在线编辑器</title>
     <link href="/editor-in-one-line"/>
     <updated>2015-10-27T00:00:00+08:00</updated>
     <id>/editor-in-one-line</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;1. 事情是这样的&lt;/h2&gt;

&lt;p&gt;事情是这样的，有一天要开会，我准备把会议的 outline 写到个 &lt;strong&gt;&lt;em&gt;暂时&lt;/em&gt;&lt;/strong&gt; 的 notebook 里，在会议的时候参考。&lt;/p&gt;

&lt;p&gt;然后，问题就来了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;我不想打开 pages，excel，office 什么的；&lt;/li&gt;
  &lt;li&gt;我也不想打开 xcode 的 text editor，因为打开的窗口已经很多了，切换起来麻烦；&lt;/li&gt;
  &lt;li&gt;我也不想用正在写代码的 sublime 新建个文件，因为不想污染我写代码的环境，哈哈；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后，想法就来了，要是能用浏览器来做编辑器就好了，然后突然想到很久之前看到的一篇文章，说如何用一行代码把 chrome 浏览器变成在线编辑器。哈哈，google 了下，果然找到解决方法了，果然是技术造福人类啊。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://36kr.com/p/201096.html&quot;&gt;# 极氪 # 仅一行代码，打造一个在线编辑器&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可是还不够，这样每次都要拷贝，粘贴到浏览器里，多麻烦啊。要是能输入一个链接，直接就有这样一个在线编辑器，那多爽啊。哈哈。&lt;/p&gt;

&lt;p&gt;想想它的原理，其实就是一个 html 文件嘛，更细致一点，就是一个很简单的，定制化的 textarea [我不确定是不是这个组件，但是这都不重要了，哈哈]，只要把这个 html 放到一个固定的，人人都能访问的地方不就行了？&lt;/p&gt;

&lt;h2 id=&quot;github&quot;&gt;2. 感谢 github&lt;/h2&gt;

&lt;p&gt;于是乎，解决方案就来了。首先得感谢 github 啊，让多少人零首付零还款就搭建了个博客，我也一样。既然博客都有了，那把上面的那个 html 文件放到博客上不就行了？&lt;/p&gt;

&lt;p&gt;于是乎，我把上面的 html 保存到自己 github 博客的 &lt;code class=&quot;highlighter-rouge&quot;&gt;files/&lt;/code&gt; 目录下面，然后直接访问 &lt;a href=&quot;http://litaotao.github.io/files/editor.html&quot;&gt;litaotao.github.io/files/editor.html&lt;/a&gt; 就可以了。哈哈，爽爽的赶脚。&lt;/p&gt;

&lt;p&gt;以后就方便多了，再要写什么临时文本的时候，直接打开浏览器，输入 &lt;a href=&quot;http://litaotao.github.io/files/editor.html&quot;&gt;litaotao.github.io/files/editor.html&lt;/a&gt; 就可以了。怎么有一种逼格满满的赶脚，哈哈。&lt;/p&gt;

&lt;p&gt;当然了，你也可以自己搞一个，下载这个 &lt;a href=&quot;https://github.com/litaotao/litaotao.github.io/raw/master/files/editor.html&quot;&gt;html&lt;/a&gt; 文件，然后放到你的博客下面就可以了。&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>python else 用法总结</title>
     <link href="/python-if-else-usage"/>
     <updated>2015-10-25T00:00:00+08:00</updated>
     <id>/python-if-else-usage</id>
     <content type="html">&lt;h2 id=&quot;if-else-&quot;&gt;1. 常规的 if else 用法&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;x is true&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;x is not true&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;if-else--1&quot;&gt;2. if else 快捷用法&lt;/h2&gt;

&lt;p&gt;这里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;if else&lt;/code&gt; 可以作为三元操作符使用。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;is_pass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pass? &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;for-&quot;&gt;3. 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 关键字一起用&lt;/h2&gt;

&lt;p&gt;在满足以下情况的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 下的代码块会被执行：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for 循环里的语句执行完成&lt;/li&gt;
  &lt;li&gt;for 循环里的语句没有被 &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; 语句打断&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 打印 `For loop completed the execution`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;For loop completed the execution&#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 不打印 `For loop completed the execution`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;For loop completed the execution&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;while-&quot;&gt;4. 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 关键字一起用&lt;/h2&gt;

&lt;p&gt;和上面类似，在满足以下情况的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 下的代码块会被执行：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;while 循环里的语句执行完成&lt;/li&gt;
  &lt;li&gt;while 循环里的语句没有被 &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; 语句打断&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 打印 `While loop execution completed`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;While loop execution completed&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 不打印 `While loop execution completed`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;While loop execution completed&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;try-except-&quot;&gt;5. 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;try except&lt;/code&gt; 一起用&lt;/h2&gt;

&lt;p&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;try except&lt;/code&gt; 一起使用时，如果不抛出异常，&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;里的语句就能被执行。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;result.txt&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;IOError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;cannot open&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Executes only if file opened properly&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;has&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;lines&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section&quot;&gt;参考文档&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.idiotinside.com/2015/10/18/5-methods-to-use-else-block-in-python&quot;&gt;5 different methods to use an else block in python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   

</feed>


</body>
</html>
